from datetime import datetime
from typing import Dict, List
from Paciente import Paciente
from Medico import Medico
from Turno import Turno
from HistoriaClinica import HistoriaClinica
from exceptions.MedicoNoDisponibleException import MedicoNoDisponibleException
from exceptions.PacienteNoEncontradoException import PacienteNoEncontradoException
from exceptions.RecetaInvalidaException import RecetaInvalidaException
from exceptions.TurnoOcupadoException import TurnoOcupadoException


class Clinica:
    def __init__(self):
        
        self.__pacientes__: Dict[str, 'Paciente'] = {}
        self.__medicos__: Dict[str, 'Medico'] = {}
        self.__turnos__: List['Turno'] = []
        self.__historias_clinicas__: Dict[str, 'HistoriaClinica'] = {}
    
    
    def agregar_paciente(self, paciente: 'Paciente') -> None:

        dni = paciente.obtener_dni()
        if dni in self.__pacientes__:
            raise ValueError(f"El paciente con DNI {dni} ya est√° registrado")
        
        self.__pacientes__[dni] = paciente
        self.__historias_clinicas__[dni] = HistoriaClinica(paciente)
    
    def agregar_medico(self, medico: 'Medico') -> None:

        matricula = medico.obtener_matricula()
        if matricula in self.__medicos__:
            raise ValueError(f"El m√©dico con matr√≠cula {matricula} ya est√° registrado")
        
        self.__medicos__[matricula] = medico
    
    def obtener_pacientes(self) -> List['Paciente']:

        return list(self.__pacientes__.values())
    
    def obtener_medicos(self) -> List['Medico']:
        """
        Devuelve todos los m√©dicos registrados.
        
        Returns:
            list[Medico]: Lista de todos los m√©dicos
        """
        return list(self.__medicos.values())
    
    def obtener_medico_por_matricula(self, matricula: str) -> 'Medico':
        """
        Devuelve un m√©dico por su matr√≠cula.
        
        Args:
            matricula (str): Matr√≠cula del m√©dico
        
        Returns:
            Medico: El m√©dico correspondiente
        
        Raises:
            MedicoNoEncontradoException: Si no se encuentra el m√©dico
        """
        self.validar_existencia_medico(matricula)
        return self.__medicos[matricula]
    
    # üìÜ Turnos
    
    def agendar_turno(self, dni: str, matricula: str, especialidad: str, fecha_hora: datetime) -> None:
        """
        Agenda un turno si se cumplen todas las condiciones.
        
        Args:
            dni (str): DNI del paciente
            matricula (str): Matr√≠cula del m√©dico
            especialidad (str): Especialidad solicitada
            fecha_hora (datetime): Fecha y hora del turno
        
        Raises:
            PacienteNoEncontradoException: Si no existe el paciente
            MedicoNoDisponibleException: Si el m√©dico no est√° disponible
            TurnoOcupadoException: Si el turno ya est√° ocupado
        """
        # Validar existencia de paciente y m√©dico
        self.validar_existencia_paciente(dni)
        self.validar_existencia_medico(matricula)
        
        paciente = self.__pacientes[dni]
        medico = self.__medicos[matricula]
        
        # Obtener d√≠a de la semana
        dia_semana = self.obtener_dia_semana_en_espanol(fecha_hora)
        
        # Validar que el m√©dico atienda esa especialidad ese d√≠a
        self.validar_especialidad_en_dia(medico, especialidad, dia_semana)
        
        # Validar que no haya turno duplicado
        self.validar_turno_no_duplicado(matricula, fecha_hora)
        
        # Crear y agregar el turno
        from turno import Turno  # Importaci√≥n local
        nuevo_turno = Turno(paciente, medico, especialidad, fecha_hora)
        self.__turnos.append(nuevo_turno)
        
        # Agregar turno a la historia cl√≠nica del paciente
        self.__historias_clinicas[dni].agregar_turno(nuevo_turno)
    
    def obtener_turnos(self) -> List['Turno']:
        """
        Devuelve todos los turnos agendados.
        
        Returns:
            list[Turno]: Lista de todos los turnos
        """
        return self.__turnos.copy()
    
    # üìë Recetas e Historias Cl√≠nicas
    
    def emitir_receta(self, dni: str, matricula: str, medicamentos: List[str]) -> None:
        """
        Emite una receta para un paciente.
        
        Args:
            dni (str): DNI del paciente
            matricula (str): Matr√≠cula del m√©dico
            medicamentos (list[str]): Lista de medicamentos
        
        Raises:
            PacienteNoEncontradoException: Si no existe el paciente
            MedicoNoEncontradoException: Si no existe el m√©dico
            RecetaInvalidaException: Si la receta no es v√°lida
        """
        # Validar existencia de paciente y m√©dico
        self.validar_existencia_paciente(dni)
        self.validar_existencia_medico(matricula)
        
        # Validar que la lista de medicamentos no est√© vac√≠a
        if not medicamentos:
            from excepciones import RecetaInvalidaException
            raise RecetaInvalidaException("La receta debe contener al menos un medicamento")
        
        paciente = self.__pacientes[dni]
        medico = self.__medicos[matricula]
        
        # Crear y agregar la receta
        from receta import Receta  # Importaci√≥n local
        nueva_receta = Receta(paciente, medico, medicamentos, datetime.now())
        
        # Agregar receta a la historia cl√≠nica del paciente
        self.__historias_clinicas[dni].agregar_receta(nueva_receta)
    
    def obtener_historia_clinica(self, dni: str) -> 'HistoriaClinica':
        """
        Devuelve la historia cl√≠nica completa de un paciente.
        
        Args:
            dni (str): DNI del paciente
        
        Returns:
            HistoriaClinica: Historia cl√≠nica del paciente
        
        Raises:
            PacienteNoEncontradoException: Si no existe el paciente
        """
        self.validar_existencia_paciente(dni)
        return self.__historias_clinicas[dni]
    
    # ‚úÖ Validaciones y Utilidades
    
    def validar_existencia_paciente(self, dni: str) -> None:
        """
        Verifica si un paciente est√° registrado.
        
        Args:
            dni (str): DNI del paciente
        
        Raises:
            PacienteNoEncontradoException: Si el paciente no existe
        """
        if dni not in self.__pacientes:
            from excepciones import PacienteNoEncontradoException
            raise PacienteNoEncontradoException(f"No se encontr√≥ paciente con DNI: {dni}")
    
    def validar_existencia_medico(self, matricula: str) -> None:
        """
        Verifica si un m√©dico est√° registrado.
        
        Args:
            matricula (str): Matr√≠cula del m√©dico
        
        Raises:
            MedicoNoEncontradoException: Si el m√©dico no existe
        """
        if matricula not in self.__medicos:
            from excepciones import MedicoNoDisponibleException
            # Usamos MedicoNoDisponibleException ya que no existe MedicoNoEncontradoException
            raise MedicoNoDisponibleException(f"No se encontr√≥ m√©dico con matr√≠cula: {matricula}")
    
    def validar_turno_no_duplicado(self, matricula: str, fecha_hora: datetime) -> None:
        """
        Verifica que no haya un turno duplicado.
        
        Args:
            matricula (str): Matr√≠cula del m√©dico
            fecha_hora (datetime): Fecha y hora del turno
        
        Raises:
            TurnoOcupadoException: Si ya existe un turno en esa fecha y hora
        """
        for turno in self.__turnos:
            if (turno.medico.matricula == matricula and 
                turno.fecha_hora == fecha_hora):
                from excepciones import TurnoOcupadoException
                raise TurnoOcupadoException(
                    f"El m√©dico ya tiene un turno agendado el {fecha_hora.strftime('%d/%m/%Y %H:%M')}"
                )
    
    def obtener_dia_semana_en_espanol(self, fecha_hora: datetime) -> str:
        """
        Traduce un objeto datetime al d√≠a de la semana en espa√±ol.
        
        Args:
            fecha_hora (datetime): Fecha y hora
        
        Returns:
            str: D√≠a de la semana en espa√±ol
        """
        dias_semana = {
            0: "lunes",
            1: "martes", 
            2: "miercoles",
            3: "jueves",
            4: "viernes",
            5: "sabado",
            6: "domingo"
        }
        return dias_semana[fecha_hora.weekday()]
    
    def obtener_especialidad_disponible(self, medico: 'Medico', dia_semana: str) -> str:
        """
        Obtiene la especialidad disponible para un m√©dico en un d√≠a.
        
        Args:
            medico (Medico): El m√©dico
            dia_semana (str): D√≠a de la semana
        
        Returns:
            str: Especialidad disponible
        
        Raises:
            MedicoNoDisponibleException: Si el m√©dico no trabaja ese d√≠a
        """
        horarios = medico.obtener_horarios()
        if dia_semana not in horarios:
            from excepciones import MedicoNoDisponibleException
            raise MedicoNoDisponibleException(
                f"El m√©dico {medico.nombre} no trabaja los {dia_semana}"
            )
        
        return horarios[dia_semana]["especialidad"]
    
    def validar_especialidad_en_dia(self, medico: 'Medico', especialidad_solicitada: str, dia_semana: str) -> None:
        """
        Verifica que el m√©dico atienda esa especialidad ese d√≠a.
        
        Args:
            medico (Medico): El m√©dico
            especialidad_solicitada (str): Especialidad solicitada
            dia_semana (str): D√≠a de la semana
        
        Raises:
            MedicoNoDisponibleException: Si el m√©dico no atiende esa especialidad ese d√≠a
        """
        try:
            especialidad_disponible = self.obtener_especialidad_disponible(medico, dia_semana)
            if especialidad_disponible.lower() != especialidad_solicitada.lower():
                from excepciones import MedicoNoDisponibleException
                raise MedicoNoDisponibleException(
                    f"El m√©dico {medico.nombre} no atiende {especialidad_solicitada} los {dia_semana}. "
                    f"Disponible: {especialidad_disponible}"
                )
        except Exception as e:
            # Re-lanzar la excepci√≥n si ya es del tipo correcto
            raise e
    
    def __str__(self) -> str:
        """
        Representaci√≥n textual del sistema de la cl√≠nica.
        
        Returns:
            str: Resumen del estado del sistema
        """
        return f"""=== SISTEMA DE GESTI√ìN CL√çNICA ===
Pacientes registrados: {len(self.__pacientes)}
M√©dicos registrados: {len(self.__medicos)}
Turnos agendados: {len(self.__turnos)}
Historias cl√≠nicas: {len(self.__historias_clinicas)}"""